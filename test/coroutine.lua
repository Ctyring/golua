---
--- Generated by Luanalysis
--- Created by Lenovo.
--- DateTime: 2023/1/5 15:00
---
-- 1. coroutine的状态
-- 刚创建时：suspended挂起
-- 调用resume时：running运行
-- 调用yield时：suspended挂起
-- 执行完毕时：dead死亡
-- 协程A唤醒协程B时，协程B是运行状态，协程A是normal正常状态
-- 2、 coroutine的返回值
-- 第一个resume函数(没有对应等待它的yield)会把所有参数传递给协程的主函数
co = coroutine.create(function(a, b, c)
    print("co", a, b, c + 2)
    return 6
end)
print(coroutine.resume(co, 1, 2, 3)) -- true 6
-- 如果有yield，resume的返回值对应yield的参数
co2 = coroutine.create(function(a, b)
    coroutine.yield(a + b, a - b)
end)
print(coroutine.resume(co2, 20, 10)) -- true 30 10
-- 对应的，yield的返回值对应resume的参数
co3 = coroutine.create(function(x)
    print("test1", x)
    print("test2", coroutine.yield())
end)
coroutine.resume(co3, "1") -- test1 1
coroutine.resume(co3, "hahaha")  -- test2 2

-- 使用过滤器的生产者消费者
function receive(prod)
    local status, value = coroutine.resume(prod)
    return value
end

function send(x)
    coroutine.yield(x)
end

function producer()
    return coroutine.create(function()
        while true do
            local x = io.read()
            send(x)
        end
    end)
end

function filter(prod)
    return coroutine.create(function()
        for line = 1, math.huge do
            local x = receive(prod)
            x = string.format("%5d %s", line, x)
            send(x)
        end
    end)
end

function consumer(prod)
    while true do
        local x = receive(prod)
        io.write(x, "\n")
    end
end

consumer(filter(producer()))